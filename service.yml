AWSTemplateFormatVersion: '2010-09-09'
Description: An ECS deploy of a service
Parameters:
  VpcId:
    Type: String
  CertId:
    Type: String
  ClusterName:
    Type: String
    Default: kloudcover
  HostedZone:
    Type: String
  ServiceName:
    Type: String
  Version:
    Type: String
    Default: latest
  Environment:
    Type: String
  Priority:
    Type: String


Resources:
  MyIpCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub ${ServiceName}.${HostedZone}
      DomainValidationOptions:
      - DomainName: !Sub ${ServiceName}.${HostedZone}
        ValidationDomain: !Sub ${ServiceName}.${HostedZone}

  MyIpDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${HostedZone}.
      Comment: DNS name for my ip.
      Name: !Sub ${ServiceName}.${HostedZone}.
      AliasTarget: dualstack.kloudco-ALB-1XOWGRS4DIG1S-1468524797.us-west-2.elb.amazonaws.com
      Type: A

  # TargetGroup443:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     HealthCheckIntervalSeconds: 10
  #     UnhealthyThresholdCount: 7
  #     HealthCheckPath: "/"
  #     Matcher:
  #       HttpCode: 200-302
  #     Port: 1
  #     Protocol: HTTP
  #     VpcId: !Ref VpcId
  # ListenerRule443:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   Properties:
  #     Actions:
  #       - Type: forward
  #         TargetGroupArn: !Ref TargetGroup443
  #     Conditions:
  #       - Field: host-header
  #         Values:
  #         - !Ref DomainName
  #     ListenerArn: !ImportValue kloudcover-alb:ListenerRule443
  #     Priority: !Sub ${Priority}
  # ListenerCertificate:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerCertificate
  #   Properties:
  #     Certificates:
  #         - CertificateArn: !Sub "arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${CertId}"
  #     ListenerArn: !ImportValue kloudcover-alb:ListenerRule443
  # Service:
  #   DependsOn:
  #     - ListenerRule443
  #     - Role
  #   Type: AWS::ECS::Service
  #   Properties:
  #     Cluster: !Ref ClusterName
  #     DesiredCount: !Ref Count
  #     LoadBalancers:
  #       - ContainerName: !Sub ${ServiceName}
  #         ContainerPort: 80
  #         TargetGroupArn: !Ref TargetGroup443
  #     Role: !ImportValue kloudcover-alb:ServiceRole
  #     HealthCheckGracePeriodSeconds: 120
  #     PlacementStrategies:
  #       - Type: spread
  #         Field: instanceId
  #     TaskDefinition: !Ref Task
  # Logs:
  #   Type: "AWS::Logs::LogGroup"
  #   Properties:
  #     LogGroupName: !Sub ${AWS::StackName}
  #     RetentionInDays: 7
  # Task:
  #   Type: AWS::ECS::TaskDefinition
  #   Properties:
  #     TaskRoleArn: !Ref Role
  #     ContainerDefinitions:
  #       - Name: !Sub ${ServiceName}
  #         Cpu: 0
  #         Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/my-ip:${Version}
  #         MemoryReservation: 32
  #         Environment:
  #           - Name: SSM_PATH
  #             Value: !Sub /${ServiceName}/${Environment}
  #
  #         PortMappings:
  #           - ContainerPort: 3000
  #         LogConfiguration:
  #           LogDriver: awslogs
  #           Options:
  #             awslogs-group: !Sub ${AWS::StackName}
  #             awslogs-region: !Sub ${AWS::Region}
  #             awslogs-stream-prefix: !Sub ${ServiceName}
  #
  # Role:
  #   Type: "AWS::IAM::Role"
  #   Properties:
  #     RoleName: !Sub ${AWS::StackName}-servicerole
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Principal:
  #             Service:
  #               - "ecs-tasks.amazonaws.com"
  #           Action:
  #             - "sts:AssumeRole"
  #         - Effect: "Allow"
  #           Principal:
  #             AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
  #           Action: "sts:AssumeRole"
  #     Path: '/'
  #     Policies:
  #       - PolicyName: "ssm"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: "Allow"
  #               Action:
  #                 - 'ssm:*'
  #               Resource:
  #                 - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${ServiceName}/${Environment}/*"
  #
  # HealthCheckLambda:
  #   Type: "AWS::Lambda::Function"
  #   Properties:
  #     Description: Health check lambda function
  #     MemorySize: 128
  #     FunctionName: !Sub ${ServiceName}HealthCheck-${Environment}
  #     Role: !GetAtt HealthCheckLambdaRole.Arn
  #     Runtime: nodejs8.10
  #     Timeout: 10
  #     Handler: index.handler
  #     Environment:
  #       Variables:
  #         URL: !Sub 'https://${DomainName}'
  #         APPLICATION_NAME: !Sub ${ServiceName}-${Environment}
  #     Code:
  #       ZipFile: >
  #         'use strict'; var AWS = require('aws-sdk'); var cloudwatch = new AWS.CloudWatch(); var target = process.env.URL; var appName = process.env.APPLICATION_NAME; const https = require("https"); var putMetric = (value, cb) => {
  #           var params = {
  #             MetricData: [
  #               {
  #                 MetricName: appName,
  #                 Dimensions: [
  #                   {
  #                     Name: 'Alive',
  #                     Value: 'isup'
  #                   }
  #                 ],
  #                 Timestamp: new Date,
  #                 Unit: 'Count',
  #                 Value: value
  #               }
  #             ],
  #             Namespace: 'AppHealth'
  #           };
  #           cloudwatch.putMetricData(params, function(err, data) {
  #             if (err) console.log(err, err.stack); // an error occurred
  #             else     console.log(data);
  #             cb()          // successful response
  #           });
  #         };
  #         exports.handler = function(event, context, callback) {
  #           var req = https.get(target, (res) => {
  #             res.setEncoding('utf8')
  #             if(res.statusCode >= 200 && res.statusCode <= 301) {
  #               console.log("Healthy: StatusCode: " +res.statusCode)
  #               putMetric('1', callback)
  #             } else {
  #               putMetric('0', callback)
  #             }
  #           })
  #           req.on('error', (err) => {
  #             putMetric('0', callback)
  #           })
  #         };
  # HealthCheckLambdaRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: "2012-10-17"
  #       Statement:
  #         - Effect: "Allow"
  #           Principal:
  #             Service:
  #               - "lambda.amazonaws.com"
  #           Action:
  #             - "sts:AssumeRole"
  #         - Effect: "Allow"
  #           Principal:
  #             AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
  #           Action: "sts:AssumeRole"
  #     Path: '/'
  #     Policies:
  #       - PolicyName: "metricput"
  #         PolicyDocument:
  #           Version: "2012-10-17"
  #           Statement:
  #             - Effect: "Allow"
  #               Action:
  #                 - 'cloudwatch:Put*'
  #                 - 'logs:*'
  #               Resource: "*"
  # LambdaInvokePermission:
  #   Type: 'AWS::Lambda::Permission'
  #   Properties:
  #     FunctionName: !GetAtt HealthCheckLambda.Arn
  #     Action: 'lambda:InvokeFunction'
  #     Principal: events.amazonaws.com
  #     SourceArn: !GetAtt HealthCheckEvent.Arn
  #
  # HealthCheckEvent:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     State: ENABLED
  #     Description: !Sub ${ServiceName}-${Environment}-healthcheck
  #     ScheduleExpression: rate(5 minutes)
  #     Targets:
  #       - Id: !Sub ${ServiceName}-${Environment}-healthcheck
  #         Arn: !GetAtt HealthCheckLambda.Arn
  #
  # HealthCheckAlarm:
  #   Type: AWS::CloudWatch::Alarm
  #   Properties:
  #     AlarmActions:
  #       - !Sub arn:aws:sns:${AWS::Region}:${AWS::AccountId}:kevins-cell
  #     AlarmName: !Sub ${ServiceName}-${Environment}
  #     MetricName: !Sub ${ServiceName}-${Environment}
  #     Namespace: AppHealth
  #     Statistic: Minimum
  #     Period: 300
  #     EvaluationPeriods: 2
  #     Threshold: 1
  #     ComparisonOperator: LessThanThreshold
  #     Dimensions:
  #       - Name: Alive
  #         Value: isup
