---
Parameters:
  RepoName:
    Type: String
  Branch:
    Type: String
    Default: master
  Owner:
    Type: String
Resources:
  AppPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Sub ecs-cluster-deployer-${AWS::AccountId}-${AWS::Region}
        Type: S3
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Branch: !Ref Branch
                OAuthToken: "{{resolve:secretsmanager:GithubToken:SecretString}}"
                Owner: !Ref Owner
                PollForSourceChanges: 'false'
                Repo: !Ref RepoName
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: '1'

        - Name: build
          Actions:
            - Name: build-docker
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref BuildDockerCodebuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: AppVersion
              RunOrder: '1'

        - Name: deploy
          Actions:
            - Name: deploy-cfn
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
                - Name: AppVersion
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: "CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM"
                ParameterOverrides: '{"Count": "2", "Subnets": "subnet-0c00ee77,subnet-a6954dcf,subnet-d65b579c", "HostedZoneName": "clustermaestro.com", "Priority": "1", "ClusterName": "dev-jamf", "ServiceName": "my-ip", "Vpc": "vpc-9aab64f3", "ALBSGBadgeFromCluster": "sg-0e76fbe6ca3610b09", "HostedZone": "ZU20SE53GVCYV", "SubDomain": "jamf"}'
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: test-ecs-my-ip
                TemplatePath: "SourceOutput::app-stack.yml"
                ParameterOverrides: |
                  {
                    "Subnets": "subnet-0c00ee77,subnet-a6954dcf,subnet-d65b579c",
                    "ServiceName": "my-ip",
                    "Vpc": "vpc-9aab64f3",
                    "ClusterName": "dev-jamf",
                    "Count": "2",
                    "ALBSGBadgeFromCluster": "sg-0e76fbe6ca3610b09",
                    "HostedZone": "ZU20SE53GVCYV",
                    "HostedZoneName": "clustermaestro.com",
                    "Priority": "1",
                    "Version": {"Fn::GetParam": ["AppVersion", "version.json", "Version"]},
                    "SubDomain": "jamf"
                  }

              OutputArtifacts: []
              RunOrder: '1'


  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - cloudformation.amazonaws.com
      Policies:
      - PolicyName: codebuild-app
        PolicyDocument:
          Statement:
          - Action:
              - ecs:*
              - ec2:*
              - logs:*
              - elasticloadbalancingv2:*
              - elasticloadbalancing:*
              - route53:Get*
              - route53:ChangeResourceRecordSets
            Effect: Allow
            Resource:
              - "*"
          - Action:
              - iam:PassRole
              - iam:Get*
              - iam:Create*
              - iam:Update*
              - iam:Delete*
              - iam:Put*
            Effect: Allow
            Resource:
              - !Sub arn:aws:iam::${AWS::AccountId}:role/test-ecs-my-ip-*
  CodeBuildDockerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
              - codebuild.amazonaws.com
      Policies:
      - PolicyName: codebuild-app
        PolicyDocument:
          Statement:
          - Action:
              - ecr:*
            Effect: Allow
            Resource:
              - !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/my-ip*
          - Action:
              - logs:*
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action: s3:*
            Effect: Allow
            Resource:
            - !Sub arn:aws:s3:::ecs-cluster-deployer-${AWS::AccountId}-${AWS::Region}
            - !Sub arn:aws:s3:::ecs-cluster-deployer-${AWS::AccountId}-${AWS::Region}/*


  BuildDockerCodebuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Sub ${AWS::Region}
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
          - Name: IMAGE_REPO_NAME
            Value: my-ip
        Image: aws/codebuild/standard:2.0
        PrivilegedMode: 'true'
        Type: LINUX_CONTAINER
      ServiceRole: !Ref CodeBuildDockerRole
      Source:
        Type: CODEPIPELINE

  GitHook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: "{{resolve:secretsmanager:GithubToken:SecretString}}"
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      RegisterWithThirdParty: 'true'
      TargetAction: SourceAction
      TargetPipeline: !Ref AppPipeline
      TargetPipelineVersion: !GetAtt AppPipeline.Version


  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:UpdateStack
              - cloudformation:CreateChangeSet
              - cloudformation:DeleteChangeSet
              - cloudformation:DescribeChangeSet
              - cloudformation:ExecuteChangeSet
              - cloudformation:SetStackPolicy
              - cloudformation:ValidateTemplate
              - ecr:DescribeImages
            Effect: Allow
            Resource: "*"
          - Action:
              - iam:PassRole
            Effect: Allow
            Resource: "*"
            Condition:
              StringEqualsIfExists:
                iam:PassedToService:
                  - cloudformation.amazonaws.com
          - Action:
            - s3:*
            Effect: Allow
            Resource:
            - !Sub arn:aws:s3:::ecs-cluster-deployer-${AWS::AccountId}-${AWS::Region}
            - !Sub arn:aws:s3:::ecs-cluster-deployer-${AWS::AccountId}-${AWS::Region}/*
        PolicyName: pipeline-base
